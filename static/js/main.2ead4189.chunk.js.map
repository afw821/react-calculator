{"version":3,"sources":["components/ResultPanel.jsx","components/Number.jsx","components/Operator.jsx","components/Calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["ResultPanel","firstNumber","secondNumber","addCommas","operator","result","className","id","Number","value","handleSetNumber","onClick","e","Operator","handleSetOperator","isClear","Calculator","handleClear","handleCalculateResult","App","state","isOperatorChosen","setState","currentTarget","includes","handleSetResult","parseFloat","Math","pow","num","number","toString","regExp","iOfPeriod","indexOf","numBeforePeriod","slice","replace","length","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ead4189.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ResultPanel = ({\n  firstNumber,\n  secondNumber,\n  addCommas,\n  operator,\n  result,\n}) => {\n  return (\n    <div className=\"col-lg-6\">\n      <div className=\"card\">\n        <h3 className=\"card-header\">Result</h3>\n        <div className=\"card-body\">\n          <h1 id=\"first-number\">{addCommas(firstNumber)}</h1>\n          <h1 id=\"operator\">{operator}</h1>\n          <h1 id=\"second-number\">{addCommas(secondNumber)}</h1>\n          <hr />\n          <h1 id=\"result\">{addCommas(result)}</h1>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultPanel;\n","import React from \"react\";\n\nconst Number = ({ value, handleSetNumber }) => {\n  return (\n    <button\n      id=\"button-${value}\"\n      className=\"btn btn-primary btn-width number\"\n      value={value}\n      onClick={(e) => handleSetNumber(e)}\n    >\n      <h1>{value}</h1>\n    </button>\n  );\n};\n\nexport default Number;\n","import React from \"react\";\n\nconst Operator = ({ value, operator, handleSetOperator, isClear }) => {\n  return (\n    <button\n      id={`button-${value}`}\n      className={`btn ${\n        isClear ? \"btn-dark\" : \"btn-width btn-danger\"\n      } operator`}\n      value={value}\n      onClick={(e) => handleSetOperator(e)}\n    >\n      <h1>{operator}</h1>\n    </button>\n  );\n};\n\nexport default Operator;\n","import React from \"react\";\nimport ResultPanel from \"../components/ResultPanel\";\nimport Number from \"../components/Number\";\nimport Operator from \"../components/Operator\";\n\nconst Calculator = ({\n  handleSetNumber,\n  handleClear,\n  handleCalculateResult,\n  handleSetOperator,\n  addCommas,\n  firstNumber,\n  secondNumber,\n  operator,\n  result,\n}) => {\n  return (\n    <>\n      <div className=\"jumbotron\">\n        <h1 className=\"text-center\">React Calculator</h1>\n        <h3 className=\"text-center\">\n          Perform basic mathematic operations using the power of React.js!\n        </h3>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-4\">\n            <div className=\"card\">\n              <h3 className=\"card-header\">Calculator</h3>\n\n              <div className=\"card-body\">\n                <Number value=\"1\" handleSetNumber={handleSetNumber} />\n                <Number value=\"2\" handleSetNumber={handleSetNumber} />\n                <Number value=\"3\" handleSetNumber={handleSetNumber} />\n                <Operator\n                  value=\"plus\"\n                  operator=\"+\"\n                  handleSetOperator={handleSetOperator}\n                  isClear={false}\n                />\n                <br />\n                <Number value=\"4\" handleSetNumber={handleSetNumber} />\n                <Number value=\"5\" handleSetNumber={handleSetNumber} />\n                <Number value=\"6\" handleSetNumber={handleSetNumber} />\n                <Operator\n                  value=\"minus\"\n                  operator=\"-\"\n                  handleSetOperator={handleSetOperator}\n                  isClear={false}\n                />\n                <br />\n                <Number value=\"7\" handleSetNumber={handleSetNumber} />\n                <Number value=\"8\" handleSetNumber={handleSetNumber} />\n                <Number value=\"9\" handleSetNumber={handleSetNumber} />\n                <Operator\n                  value=\"times\"\n                  operator=\"x\"\n                  handleSetOperator={handleSetOperator}\n                  isClear={false}\n                />\n                <br />\n                <Number value=\"0\" handleSetNumber={handleSetNumber} />\n                <Operator\n                  value=\"divide\"\n                  operator=\"&divide;\"\n                  handleSetOperator={handleSetOperator}\n                  isClear={false}\n                />\n                <Operator\n                  value=\"power\"\n                  operator=\"^\"\n                  handleSetOperator={handleSetOperator}\n                  isClear={false}\n                />\n                <Operator\n                  value=\"equal\"\n                  operator=\"=\"\n                  handleSetOperator={handleCalculateResult}\n                  isClear={false}\n                />\n                <br />\n                <Operator\n                  value=\"clear\"\n                  operator=\"clear\"\n                  handleSetOperator={handleClear}\n                  isClear={true}\n                />\n                <Operator\n                  value=\".\"\n                  operator=\".\"\n                  handleSetOperator={handleSetNumber}\n                  isClear={false}\n                />\n              </div>\n            </div>\n          </div>\n\n          <ResultPanel\n            firstNumber={firstNumber}\n            secondNumber={secondNumber}\n            addCommas={addCommas}\n            operator={operator}\n            result={result}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Calculator;\n","import React, { Component } from \"react\";\nimport Calculator from \"./components/Calculator\";\nclass App extends Component {\n  state = {\n    firstNumber: \"\",\n    secondNumber: \"\",\n    operator: \"\",\n    isOperatorChosen: false,\n    result: \"\",\n  };\n\n  handleClear = () => {\n    this.setState({\n      firstNumber: \"\",\n      secondNumber: \"\",\n      operator: \"\",\n      isOperatorChosen: false,\n      result: \"\",\n    });\n  };\n\n  handleSetNumber = ({ currentTarget }) => {\n    const value = currentTarget.value;\n    if (this.state.result) return;\n    if (!this.state.isOperatorChosen) {\n      let firstNumber = this.state.firstNumber;\n      if (firstNumber.includes(\".\") && value === \".\") return;\n\n      firstNumber += value;\n\n      this.setState({ firstNumber });\n    } else {\n      let secondNumber = this.state.secondNumber;\n      if (secondNumber.includes(\".\") && value === \".\") return;\n\n      secondNumber += value;\n\n      this.setState({ secondNumber });\n    }\n  };\n\n  handleSetResult = (result) => {\n    this.setState({ result });\n  };\n\n  handleCalculateResult = () => {\n    const { firstNumber, secondNumber, operator } = this.state;\n    let result;\n\n    switch (operator) {\n      case \"+\":\n        result = parseFloat(firstNumber) + parseFloat(secondNumber);\n        this.handleSetResult(result);\n        break;\n      case \"-\":\n        result = parseFloat(firstNumber) - parseFloat(secondNumber);\n        this.handleSetResult(result);\n        break;\n      case \"/\":\n        result = parseFloat(firstNumber) / parseFloat(secondNumber);\n        this.handleSetResult(result);\n        break;\n      case \"^\":\n        result = Math.pow(parseFloat(firstNumber), parseFloat(secondNumber));\n        this.handleSetResult(result);\n        break;\n      case \"X\":\n        result = firstNumber * parseFloat(secondNumber);\n        this.handleSetResult(result);\n        break;\n      default:\n        break;\n    }\n  };\n\n  addCommas = (num) => {\n    let number = num.toString();\n\n    const regExp = /\\B(?=(?:\\d{3})+(?!\\d))/g;\n\n    const iOfPeriod = number.indexOf(\".\");\n\n    if (number.includes(\".\") && iOfPeriod <= 3) return number; //45.9999 instead of 45.9,999\n\n    if (iOfPeriod > 3) {\n      const numBeforePeriod = number\n        .slice(0, iOfPeriod + 1)\n        .replace(regExp, \",\");\n      const numAfterPeriod = number.slice(numBeforePeriod.length - 1);\n\n      const result = numBeforePeriod + numAfterPeriod;\n      return result;\n    }\n    return number.replace(regExp, \",\");\n  };\n\n  handleSetOperator = ({ currentTarget }) => {\n    if (!this.state.firstNumber && !this.state.result) return;\n    let operator = currentTarget.value;\n\n    switch (operator) {\n      case \"plus\":\n        operator = \"+\";\n        break;\n      case \"minus\":\n        operator = \"-\";\n        break;\n      case \"divide\":\n        operator = \"/\";\n        break;\n      case \"power\":\n        operator = \"^\";\n        break;\n      case \"times\":\n        operator = \"X\";\n        break;\n    }\n\n    let isOperatorChosen = true;\n    this.setState({ operator, isOperatorChosen });\n  };\n  render() {\n    const {\n      firstNumber,\n      secondNumber,\n      operator,\n      isOperatorChosen,\n      result,\n    } = this.state;\n    return (\n      <Calculator\n        handleSetNumber={this.handleSetNumber}\n        handleClear={this.handleClear}\n        handleCalculateResult={this.handleCalculateResult}\n        handleSetOperator={this.handleSetOperator}\n        addCommas={this.addCommas}\n        firstNumber={firstNumber}\n        secondNumber={secondNumber}\n        operator={operator}\n        result={result}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}